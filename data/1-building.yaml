SERVER:
  displayName: Servers
  category: Building
  description: Develops expertise in servers, using technologies such as Scala or Node
  milestones:
    - summary: Works effectively within established server side frameworks, following current best practices
      signals:
        - Write asynchronous code using futures or another appropriate approach
        - Implement an API endpoint in Play using static dependency injection
        - Makes minor server changes to support client needs
      examples:
        - Increase max page size for moderation endpoint in Discussion API
        - Remove unused switch in Frontend
        - Catch and log errors from failed CAPI call in Frontend
    - summary: Develops new instances of existing architecture, or minor improvements to existing architecture
      signals:
        - Assesses correctness and utility of existing code and avoids blind copy-pasting
        - Generalizes code when appropriate
        - Determines data needs from product requirements
      examples:
        - Upgrade to Play 2.6.7
        - Replace Dispatch with Play WS
        - Refactor single large (‘God’) template in Frontend into separate templates per content type
    - summary: Designs standalone systems of moderate complexity, or major new features in existing systems
      signals:
        - Acts as primary maintainer for existing critical systems
        - Integrates third party services effectively
        - Writes playbooks for new service maintenance
      examples:
        - Introduce new server-side A/B testing approach to make it simpler and less risky to introduce new tests
        - Writes playbook for Composer to help with 24/7 support
        - Implement login via email link in Identity
    - summary: Builds complex, reusable architectures that pioneer best practices for other engineers, or multi-system services
      signals:
        - Delivers complex systems that achieve their goals
        - Avoids subtle architectural mistakes when considering new systems
        - Makes appropriate buy vs build choices
      examples:
        - Design and build the Grid image service
        - Architect and lead on new Avatar API
        - TODO

CLIENT:
  displayName: Client side
  category: Building
  description: Develops expertise in web client technologies, such as HTML, CSS, and JavaScript
  milestones:
    - summary: Works effectively within established client side architectures, following current best practices
      signals:
        - Makes minor modifications to existing layouts
        - Debugs and fixes simple JavaScript issues
        - Uses CSS appropriately, following style guide
      examples:
        - Update banner copy on frontend
        - Add new payment logos to support frontend
        - Modify margin on ad-slot commercial container
    - summary: Develops new instances of existing architecture, or minor improvements to existing architecture
      signals:
        - Aware of different browsers implementations and optimize for the main browsers of the team
        - Identifies the correct features to test
        - To be able to interact with third-party services and APIs
      examples:
        - Tested new features in old browsers.
        - Write unit tests for specific functions and integration tests for critical path features
        - Interacts with ophan api
    - summary: Designs standalone systems of moderate complexity, or major new features in existing systems
      signals:
        -
      examples:
        -
    - summary: Builds complex, reusable architectures that pioneer best practices for other engineers, or multi-system services
      signals:
        - Pioneers architecture migrations that reduce programmer burden
        - Makes architectural decisions that eliminate entire classes of bugs
        - Identify performance issues and come up with the most cost efficient solution
      examples:
        - Migrate Frontend codebase to ES6 and introduce type-safety using Flow, promoting use across department
        - Sending above the fold content in the first 14kb of the response
    - summary:
      signals:
        - Shapes client-side standards
        - Identifies unsolved problems and delivers world-class solutions
      examples:
        - Submit a new feature proposal to TC39
        - Create a department wide tool used to solve client-side problems that are unique to companies of the Guardian's scale
        - Create React

INFRASTRUCTURE:
  displayName: Infrastructure
  category: Building
  description: Develops expertise in operations and data storage, including working with AWS and common databases like Postgres and Dynamo
  milestones:
    - summary: Works effectively within established deployment, monitoring and alerting processes, following current best practices
      signals:
        - Writes thorough postmortems for service outages
        - Makes simple configuration changes to services
        - Adds basic monitoring or alerting to services
      examples:
        - Add alarm on latency to new Support frontend
        - Restrict egress traffic to HTTPS for Content API instances
        - Add required configuration to deploy Facia purge lambda using Riffraff
    - summary: Develops new instances of existing architecture, or minor improvements to existing architecture
      signals:
        - Made minor version upgrades to technologies
        - Makes simple improvement to deployment processes
        - Triages service issues correctly and independently
      examples:
        - Introduce server side encryption for build artifacts
        - Add trivial new role to Amigo
        - Change instance type of application to cheaper ‘t2’ family
    - summary: Designs standalone systems of moderate complexity, or major new features in existing systems
      signals:
        - Acts as primary maintainer for existing critical systems
        - Designs moderately complex systems
        - Migrates key Amigo built images to new Ubuntu version
      examples:
        - Introduce automated deployment for Lambda functions in RiffRaff
        - Use AWS step functions to manage subscription flow
        - Migrate Identity service from Mongo to Postgres/RDS safely
    - summary: Builds complex, reusable architectures that pioneer best practices for other engineers, or multi-system services
      signals:
        - Designs complex projects that encompass multiple systems and technologies
        - Demonstrates deep knowledge of key infrastructure underpinning Guardian systems
        - Introduces new databases and technologies to meet underserved needs
      examples:
        - Pioneer Thrift and implement for CAPI
        - Build Riffraff
        - Design and build common AMI baking solution (Amigo)

MOBILE:
  displayName: Mobile
  category: Building
  description: Develops expertise in native app development for Android and iOS
  milestones:
    - summary: Works effectively within established iOS or Android architectures, following current best practices
      signals:
        - Delivers features requiring simple local modifications
        - Adds simple actions that call server endpoints
        - Reuses existing components appropriately
      examples:
        - Fix a simple crash by adding some error checking
        - Parse new JSON fields coming from MAPI
        - Add new tracking calls
    - summary: Develops new instances of existing architecture, or minor improvements to existing architecture
      signals:
        - Defines new useful and appropriate proto-generated objects
        - Creates simple new activities on Android
        - Migrates code from old patterns to new patterns
      examples:
        - Add a new of view controller/activity (new onboarding, payment screen, settings screen, football article header, etc)
        - Add a new type of card or thrasher (e.. onboarding card)
        - Upgrade or replace 3rd party dependencies
    - summary: Designs major new features and demonstrates a nuanced understanding of mobile platform constraints
      signals:
        - Implements complex features with a large product surface area
        - Works effectively with Android reactive programming framework
        - Adds support for new iOS features after a major iOS version upgrade
      examples:
        - Migrate to a new Swift version
        - Implement card redesign
        - Implement complex UI (such as a new navigation menu)
    - summary: Builds complex, reusable architectures that pioneer best practices and enable engineers to work more effectively
      signals:
        - Pioneers architecture migration strategies that reduce programmer burden
        - Fixes subtle memory management or concurrency issues
        - Implements interactive dismissals that bring delight
      examples:
        - Implement new tracking architecture throughout the app
        - Implement or re-architect complex views and animations (e.g Crosswords, custom UINavigationControllers, etc)
        - Successfully introduce Kotlin to Android development and plan migration path
